在上述示例中，通过 `Blueprint` 注册机制，我们能够在 Flask 主应用中访问 `users/views.py` 中定义的视图函数。以下是实现这一过程的步骤和原理：

### 关键步骤回顾：
1. **创建 `Blueprint` 对象**：在 `users/views.py` 中创建了一个 `Blueprint` 实例 `users_bp`，并且定义了路由。
2. **注册 `Blueprint` 到主应用**：在主应用文件 `app/__init__.py` 中，通过 `app.register_blueprint(users_bp)` 将 `users_bp` 注册到 Flask 应用中。

### 流程解析：

#### **1. `users/views.py` 的路由定义**

在 `users/views.py` 文件中，我们定义了一个 `Blueprint` 并关联了两条路由：

```python
# users/views.py
from flask import Blueprint

# 创建 Blueprint 对象
users_bp = Blueprint('users', __name__, url_prefix='/users')

# 路由定义
@users_bp.route('/login')
def login():
    return "User login page"

@users_bp.route('/profile')
def profile():
    return "User profile page"
```

这段代码创建了 `Blueprint` 实例 `users_bp`，并设置了 URL 前缀 `'/users'`。因此，所有通过该 `Blueprint` 定义的路由在主应用中都会自动添加 `/users` 作为前缀。

例如：
- `/login` 会变成 `/users/login`
- `/profile` 会变成 `/users/profile`

#### **2. 注册 `Blueprint` 到主应用**

在 `app/__init__.py` 中，我们通过以下代码将 `users_bp` 注册到主应用中：

```python
# app/__init__.py
from flask import Flask
from app.users.views import users_bp  # 引入 users 模块

# 创建 Flask 应用实例
app = Flask(__name__)

# 注册 Blueprint
app.register_blueprint(users_bp)

if __name__ == "__main__":
    app.run(debug=True)
```

通过 `app.register_blueprint(users_bp)`，`users_bp` 中的所有路由（带有 `'/users'` 前缀）都会被注册到 Flask 主应用中。

#### **3. 访问 `users/views.py` 中的路由**

一旦 `Blueprint` 被注册到主应用中，用户就可以通过相应的 URL 访问 `users/views.py` 中的视图函数。例如：

- 访问 `/users/login`，调用 `login()` 视图函数，返回 **"User login page"**。
- 访问 `/users/profile`，调用 `profile()` 视图函数，返回 **"User profile page"**。

#### **实际运行示例：**

假设我们启动 Flask 应用并访问以下 URL：
1. **访问 `/users/login`：**
   - 浏览器输入 `http://localhost:5000/users/login`
   - 服务器执行 `users/views.py` 中定义的 `login()` 视图函数，返回 `"User login page"`

2. **访问 `/users/profile`：**
   - 浏览器输入 `http://localhost:5000/users/profile`
   - 服务器执行 `users/views.py` 中定义的 `profile()` 视图函数，返回 `"User profile page"`

### **总结**

通过在 `app/__init__.py` 中注册 `users_bp` 这个 `Blueprint`，Flask 将 `users/views.py` 中定义的路由添加到应用的路由表中。当用户访问 `/users/login` 或 `/users/profile` 时，主应用会调用 `users/views.py` 中相应的视图函数，返回相应的响应。